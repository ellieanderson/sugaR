---
title: "The Basic Flow"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{my-vignette}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  message = FALSE,
  comment = "#>"
)
```

```{r setup}
library(sugaR)
library(tidyverse)
library(pander)
```

The purpose of this package is to provide a clear and simple pipeline to analyse the raw data from _________. The raw data comes in .csv format and also includes a visual representation like shown here.

```{r, out.width = 600, echo = FALSE}
knitr::include_graphics("peaks.png")
```

The gray bars signify specific glycan species while the peaks tell us how much of that species is present. 

Up to this point, much of the data cleaning has been done manually. It's time consuming and monotonous, so here, we present a workflow that speeds up the process not only of cleaning the data, but also of conducting exploratory analysis on the results. This vignette will walk through the ideal pipeline along with explanation of what the functions do.

# Data Cleaning

The raw data from the machine should be a .csv file that looks something like the following:

```{r}
`Dye/Sample Peak` <- c("B, 22", "B, 25", "B, 28")
`Sample File Name` <- c("sample 1", "sample 1", "sample 1")
Marker <- c("Glycan", "Glycan", "Glycan")
Allele <- c("G1S1", "G1FS1", "G2FS1")
Size <- c(193.54, 213.76, 239.65)
Height <- c(94, 1804, 6094)
Area <- c(1117, 23954, 88032)

dat_example <- cbind(`Dye/Sample Peak`, `Sample File Name`, 
                     Marker, Allele, Size, Height, Area)
pander(dat_example)

# TODO: add in saturated column requirement
```

The columns shown in this example dataframe must be present in some form, however they may have different names. For example, `Sample File Name` may be called `ptid` or something similar. It should be unique to each sample. The only columns that need to be named as shown here are `Area` and `Allele`. 

For the rest of the tutorial, we'll use a slightly larger sample dataset that has had some additional cleaning. 

```{r}
mice <- readRDS("~/Downloads/Summer Internship/sugaR/fake_mice_serum.rds")

head(mice) %>% pander()
```

For optimal performance, you will need an additional grouping variable so results can be compared between groups. 

There are two functions that help with data prep. The first, `get_percs()`, calculates the relative abundance of a glycan component in each serum sample.

$$
\text{relative abundance} = \frac{\text{glycan peak area}}{\sum{\text{glycan peak area}}}
$$

```{r}
mice %>% 
  get_percs(glycan = "G", id_col = "id") %>% 
  ungroup() %>%
  select(c(group, Allele, size, height, Area, id, adj_area, total_area, adj_tot_area,
         rel_abundance, G_perc)) %>%
  head() %>% 
  pander()
```

Sometimes, there's an option for a glycan to be present not just once, but twice. In these cases, we want to account for them separately and also at a total amoun of that glycan. For example, galactose can be present on an antibody once, twice, or not at all. We can use the previous function as well as `get_tots()` to account for this.

When the serum goes through the machine, it looks at the overall size of the glycan species (G2, G2S2, G2S1F, etc), but doesn't account for individual glycan components (G, S, F, etc). To make sure the double glycan components are accounted for each as a separate sugar, the area of the peak is doubled when looking at the species with doubles. 

$$
\text{adjusted area} = \begin{cases}
2*Area & \text{ if double glycans (G2, S2, etc.)} \\
Area & \text{ otherwise}
\end{cases}
$$

$$
\text{relative abundance} = \frac{\text{adjusted area}}{\sum \text{adjusted area}}
$$

In order for this code to run successfully, the package `rlang` must be loaded with `library(rlang)`. 

```{r}
mice %>% 
  get_percs(glycan = "G", id_col = "id") %>% 
  get_percs(glycan = "G2", id_col = "id") %>%
  get_tots(glycan = "G", unique_id = "id", species = "Allele") %>%
  ungroup() %>%
  select(c(group, Allele, size, height, Area, id, adj_area, total_area, adj_tot_area,
         rel_abundance, G_perc, G2_perc, tot_G)) %>%
  head() %>% 
  pander()
```

# Analysis

Once the data has been prepped, we can move on to the analysis. In order for the `analyze()` function to work, your dataframe must have a few variables present: 

1. A **grouping variable**. This can be anything from treatment (did the subject receive A, B or C?) to race, as long as it's measured and included in the data.

2. An **outcome variable**. In this example, the outcome variable can be two different things. It can either be `rel_abundance` - which tells us the abundance of each glycan species in a given sample, or with a bit of tweaking to the data, we could look at the percentage of glycan components such as `G_perc` and `tot_G`. 

3. A **variable specifying what glycan species is present** in the sample. Here, that would be the column `Allele`. 

```{r}
analyze(df = mice, 
        col = "Allele", 
        x = "group", 
        y = "rel_abundance", 
        p_value = .05, 
        id_col = "id")
```

The `analyze()` function goes through a few steps. The first important thing to recognize is that it's a loop. For every value in the `col` argument (in this case, that would be `Allele`), all the groups will be tested. For example, if col = `Allele` and `Allele` contains "G2S2" and "G1FS1", then the whole process will be run specifically grouping for "G2S2", and then will run again grouping for "G1FS1". 

Within the function, first we check to make sure the groups are large enough to be comparable. The `check_groups()` function looks at the number of samples in each group. If there's a group with only 1 sample, that group is removed from the dataset. 

The cleaned dataframe is then passed on to the `group_test()` function. `group_test()` uses a Kruskal-Wallis Rank Sum test to determine if all of the groups come from the same parent distribution or not.

Hypotheses are as follows:

$$
H_0: \text{All groups are from the same distribution}\\
H_a: \text{At least one group's distribution is stochastically different from the others} 
$$
This is helpful. However, it is not possible to determine *which* group is different using this test. So we have another step to help us out. 

If the results of the Kruskal-Wallis test are significant, then the next step is to look at the pairwise comparisons. Because we're using a non-parametric test above, due to the lack of normality of the data, a Wilcoxon Rank Sum test is used here. 

The hypotheses for this test are provided by:

$$
H_0: \text{the distributions are stochastically equal}\\
H_a: \text{the distributions are not stocastically equal}
$$
Within the `pair_test()` function, all possible pairs are tested and their p-values are inserted into a matrix. The matrix is then returned, as well as a list of all the significant pairs. The list is used to add comparison bars to a plot generated by the `group_test()` function:

```{r}
group_test(df = mice, x = "group", y = "rel_abundance", id_col = "id")[2]
```

This process is repeated for every value in the `col` argument. At the end, a nested list is returned that contains the Kruskal-Wallis test results, the plot, Wilcoxon Rank Sum test results, and list of significant pairs. For one value, it will look like this:

```{r}
analyze(df = mice, col = "Allele", x = "group", y = "rel_abundance", 
           id_col = "id", filter_str = "A1FB", p_value = .05)
```


