[{"path":"https://ellieanderson.github.io/sugaR/articles/basic_flow.html","id":"data-cleaning","dir":"Articles","previous_headings":"","what":"Data Cleaning","title":"The Basic Flow","text":"raw data machine .csv file looks something like following: columns shown example dataframe must present form, however may different names. example, Sample File Name may called ptid something similar. unique sample. columns need named shown Area Allele. rest tutorial, ’ll use slightly larger sample dataset additional cleaning. Table continues optimal performance, need additional grouping variable results can compared groups. two functions help data prep. first, get_percs(), calculates relative abundance glycan component serum sample. \\[ \\text{relative abundance} = \\frac{\\text{glycan peak area}}{\\sum{\\text{glycan peak area}}} \\] Table continues Sometimes, ’s option glycan present just , twice. cases, want account separately also total amoun glycan. example, galactose can present antibody , twice, . can use previous function well get_tots() account . serum goes machine, looks overall size glycan species (G2, G2S2, G2S1F, etc), doesn’t account individual glycan components (G, S, F, etc). make sure double glycan components accounted separate sugar, area peak doubled looking species doubles. \\[ \\text{adjusted area} = \\begin{cases} 2*Area & \\text{ double glycans (G2, S2, etc.)} \\\\ Area & \\text{ otherwise} \\end{cases} \\] \\[ \\text{relative abundance} = \\frac{\\text{adjusted area}}{\\sum \\text{adjusted area}} \\] order code run successfully, package rlang must loaded library(rlang). Table continues ","code":"`Dye/Sample Peak` <- c(\"B, 22\", \"B, 25\", \"B, 28\") `Sample File Name` <- c(\"sample 1\", \"sample 1\", \"sample 1\") Marker <- c(\"Glycan\", \"Glycan\", \"Glycan\") Allele <- c(\"G1S1\", \"G1FS1\", \"G2FS1\") Size <- c(193.54, 213.76, 239.65) Height <- c(94, 1804, 6094) Area <- c(1117, 23954, 88032)  dat_example <- cbind(`Dye/Sample Peak`, `Sample File Name`,                       Marker, Allele, Size, Height, Area) pander(dat_example) # TODO: add in saturated column requirement mice <- readRDS(\"../fake_mice_serum.rds\")  head(mice) %>% pander() mice %>%    get_percs(glycan = \"G\", id_col = \"id\") %>%    ungroup() %>%   select(c(group, Allele, size, height, Area, id, adj_area, total_area, adj_tot_area,          rel_abundance, G_perc)) %>%   head() %>%    pander() mice %>%    get_percs(glycan = \"G\", id_col = \"id\") %>%    get_percs(glycan = \"G2\", id_col = \"id\") %>%   get_tots(glycan = \"G\", unique_id = \"id\", species = \"Allele\") %>%   ungroup() %>%   select(c(group, Allele, size, height, Area, id, adj_area, total_area, adj_tot_area,          rel_abundance, G_perc, G2_perc, tot_G)) %>%   head() %>%    pander()"},{"path":"https://ellieanderson.github.io/sugaR/articles/basic_flow.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"The Basic Flow","text":"data prepped, can move analysis. order analyze() function work, dataframe must variables present: grouping variable. can anything treatment (subject receive , B C?) race, long ’s measured included data. outcome variable. example, outcome variable can two different things. can either rel_abundance - tells us abundance glycan species given sample, bit tweaking data, look percentage glycan components G_perc tot_G. variable specifying glycan species present sample. , column Allele.         analyze() function goes steps. first important thing recognize ’s loop. every value col argument (case, Allele), groups tested. example, col = Allele Allele contains “G2S2” “G1FS1”, whole process run specifically grouping “G2S2”, run grouping “G1FS1”. Within function, first check make sure groups large enough comparable. check_groups() function looks number samples group. ’s group 1 sample, group removed dataset. cleaned dataframe passed group_test() function. group_test() uses Kruskal-Wallis Rank Sum test determine groups come parent distribution . Hypotheses follows: \\[ H_0: \\text{groups distribution}\\\\ H_a: \\text{least one group's distribution stochastically different others} \\] helpful. However, possible determine group different using test. another step help us . results Kruskal-Wallis test significant, next step look pairwise comparisons. ’re using non-parametric test , due lack normality data, Wilcoxon Rank Sum test used . hypotheses test provided : \\[ H_0: \\text{distributions stochastically equal}\\\\ H_a: \\text{distributions stocastically equal} \\] Within pair_test() function, possible pairs tested p-values inserted matrix. matrix returned, well list significant pairs. list used add comparison bars plot generated group_test() function:  process repeated every value col argument. end, nested list returned contains Kruskal-Wallis test results, plot, Wilcoxon Rank Sum test results, list significant pairs. one value, look like :","code":"analyze(df = mice,          col = \"Allele\",          x = \"group\",          y = \"rel_abundance\",          p_value = .05,          id_col = \"id\") #> [1] \"G0F\" #> [1] \"No significant difference\" #> [1] \"G1F[3]\" #> [1] \"No significant difference\" #> [1] \"G1F[6]\" #> [1] \"No significant difference\" #> [1] \"G2F\" #> [1] \"No significant difference\" #> [1] \"G2FB\" #> [1] \"No significant difference\" #> [1] \"G2FS1\" #> [1] \"No significant difference\" #> [1] \"G2FS2\" #> [1] \"No significant difference\" #> [1] \"G1FB[6]\" #> [1] \"No significant difference\" #> $Name #> [1] \"A1FB\" #>  #> $Kruskall.Wallis #> $Kruskall.Wallis[[1]] #>  #>  Kruskal-Wallis rank sum test #>  #> data:  rel_abundance by group #> Kruskal-Wallis chi-squared = 15.543, df = 4, p-value = 0.003698 #>  #>  #>  #> $Plot #>  #> $Pairwise #> $Pairwise$p.values #>       AE    Ag    Hu    QM    TA #> AE    NA 0.029 0.486 0.029 0.486 #> Ag 0.029    NA 0.029 0.029 0.029 #> Hu 0.486 0.029    NA 0.029 0.200 #> QM 0.029 0.029 0.029    NA 0.029 #> TA 0.486 0.029 0.200 0.029    NA #>  #> $Pairwise$significant #> [1] \"AE ~ Ag\" \"AE ~ QM\" \"Ag ~ Hu\" \"Ag ~ QM\" \"Ag ~ TA\" \"Hu ~ QM\" \"QM ~ TA\" #>  #>  #> $Name #> [1] \"G0FB\" #>  #> $Kruskall.Wallis #> $Kruskall.Wallis[[1]] #>  #>  Kruskal-Wallis rank sum test #>  #> data:  rel_abundance by group #> Kruskal-Wallis chi-squared = 19.994, df = 7, p-value = 0.005582 #>  #>  #>  #> $Plot #>  #> $Pairwise #> $Pairwise$p.values #>       AE    Ag    B6    GH    Hu    Mo    QM    TA #> AE    NA 0.029 0.029 0.686 0.029 0.486 0.343 0.686 #> Ag 0.029    NA 0.029 0.029 0.029 0.029 0.029 0.057 #> B6 0.029 0.029    NA 0.029 0.029 1.000 0.886 0.029 #> GH 0.686 0.029 0.029    NA 0.029 0.343 0.343 0.886 #> Hu 0.029 0.029 0.029 0.029    NA 0.486 0.343 0.029 #> Mo 0.486 0.029 1.000 0.343 0.486    NA 1.000 0.686 #> QM 0.343 0.029 0.886 0.343 0.343 1.000    NA 0.200 #> TA 0.686 0.057 0.029 0.886 0.029 0.686 0.200    NA #>  #> $Pairwise$significant #>  [1] \"AE ~ Ag\" \"AE ~ B6\" \"AE ~ Hu\" \"Ag ~ B6\" \"Ag ~ GH\" \"Ag ~ Hu\" \"Ag ~ Mo\" #>  [8] \"Ag ~ QM\" \"B6 ~ GH\" \"B6 ~ Hu\" \"B6 ~ TA\" \"GH ~ Hu\" \"Hu ~ TA\" #>  #>  #> $Name #> [1] \"G1FS1\" #>  #> $Kruskall.Wallis #> $Kruskall.Wallis[[1]] #>  #>  Kruskal-Wallis rank sum test #>  #> data:  rel_abundance by group #> Kruskal-Wallis chi-squared = 18.318, df = 7, p-value = 0.01061 #>  #>  #>  #> $Plot #>  #> $Pairwise #> $Pairwise$p.values #>       AE    Ag    B6    GH    Hu    Mo    QM    TA #> AE    NA 0.057 0.057 0.200 0.029 0.886 0.686 0.686 #> Ag 0.057    NA 0.886 0.200 1.000 0.057 0.029 0.114 #> B6 0.057 0.886    NA 0.114 0.486 0.057 0.057 0.114 #> GH 0.200 0.200 0.114    NA 0.057 0.200 0.686 0.686 #> Hu 0.029 1.000 0.486 0.057    NA 0.029 0.029 0.029 #> Mo 0.886 0.057 0.057 0.200 0.029    NA 0.686 0.486 #> QM 0.686 0.029 0.057 0.686 0.029 0.686    NA 0.686 #> TA 0.686 0.114 0.114 0.686 0.029 0.486 0.686    NA #>  #> $Pairwise$significant #> [1] \"AE ~ Hu\" \"Ag ~ QM\" \"Hu ~ Mo\" \"Hu ~ QM\" \"Hu ~ TA\" #>  #>  #> $Name #> [1] \"G1S1\" #>  #> $Kruskall.Wallis #> $Kruskall.Wallis[[1]] #>  #>  Kruskal-Wallis rank sum test #>  #> data:  rel_abundance by group #> Kruskal-Wallis chi-squared = 23.068, df = 7, p-value = 0.001659 #>  #>  #>  #> $Plot #>  #> $Pairwise #> $Pairwise$p.values #>       AE    Ag    B6    GH    Hu    Mo    QM    TA #> AE    NA 0.029 0.029 0.486 0.486 0.200 0.029 0.114 #> Ag 0.029    NA 0.029 0.029 0.029 0.029 0.029 0.029 #> B6 0.029 0.029    NA 0.029 0.029 0.343 0.686 0.029 #> GH 0.486 0.029 0.029    NA 0.343 0.114 0.029 0.114 #> Hu 0.486 0.029 0.029 0.343    NA 0.343 0.029 0.200 #> Mo 0.200 0.029 0.343 0.114 0.343    NA 0.343 0.343 #> QM 0.029 0.029 0.686 0.029 0.029 0.343    NA 0.057 #> TA 0.114 0.029 0.029 0.114 0.200 0.343 0.057    NA #>  #> $Pairwise$significant #>  [1] \"AE ~ Ag\" \"AE ~ B6\" \"AE ~ QM\" \"Ag ~ B6\" \"Ag ~ GH\" \"Ag ~ Hu\" \"Ag ~ Mo\" #>  [8] \"Ag ~ QM\" \"Ag ~ TA\" \"B6 ~ GH\" \"B6 ~ Hu\" \"B6 ~ TA\" \"GH ~ QM\" \"Hu ~ QM\" #>  #>  #> $Name #> [1] \"G2\" #>  #> $Kruskall.Wallis #> $Kruskall.Wallis[[1]] #>  #>  Kruskal-Wallis rank sum test #>  #> data:  rel_abundance by group #> Kruskal-Wallis chi-squared = 18.284, df = 7, p-value = 0.01075 #>  #>  #>  #> $Plot #>  #> $Pairwise #> $Pairwise$p.values #>       AE    Ag    B6    GH    Hu    Mo    QM    TA #> AE    NA 0.029 0.029 0.886 0.114 0.029 0.343 1.000 #> Ag 0.029    NA 0.029 0.029 0.029 0.029 0.343 0.486 #> B6 0.029 0.029    NA 0.029 0.029 0.057 0.343 0.200 #> GH 0.886 0.029 0.029    NA 0.057 0.029 0.343 1.000 #> Hu 0.114 0.029 0.029 0.057    NA 0.029 0.343 1.000 #> Mo 0.029 0.029 0.057 0.029 0.029    NA 0.686 0.057 #> QM 0.343 0.343 0.343 0.343 0.343 0.686    NA 0.200 #> TA 1.000 0.486 0.200 1.000 1.000 0.057 0.200    NA #>  #> $Pairwise$significant #>  [1] \"AE ~ Ag\" \"AE ~ B6\" \"AE ~ Mo\" \"Ag ~ B6\" \"Ag ~ GH\" \"Ag ~ Hu\" \"Ag ~ Mo\" #>  [8] \"B6 ~ GH\" \"B6 ~ Hu\" \"GH ~ Mo\" \"Hu ~ Mo\" #>  #>  #> $Name #> [1] \"G2FS2B\" #>  #> $Kruskall.Wallis #> $Kruskall.Wallis[[1]] #>  #>  Kruskal-Wallis rank sum test #>  #> data:  rel_abundance by group #> Kruskal-Wallis chi-squared = 14.498, df = 6, p-value = 0.02455 #>  #>  #>  #> $Plot #>  #> $Pairwise #> $Pairwise$p.values #>       AE    Ag    B6    GH    Hu    QM    TA #> AE    NA 0.029 0.114 0.886 0.029 0.343 0.114 #> Ag 0.029    NA 0.029 0.114 0.114 0.114 0.029 #> B6 0.114 0.029    NA 1.000 0.029 0.686 0.886 #> GH 0.886 0.114 1.000    NA 0.343 0.886 0.686 #> Hu 0.029 0.114 0.029 0.343    NA 0.343 0.029 #> QM 0.343 0.114 0.686 0.886 0.343    NA 0.686 #> TA 0.114 0.029 0.886 0.686 0.029 0.686    NA #>  #> $Pairwise$significant #> [1] \"AE ~ Ag\" \"AE ~ Hu\" \"Ag ~ B6\" \"Ag ~ TA\" \"B6 ~ Hu\" \"Hu ~ TA\" #>  #>  #> $Name #> [1] \"G2S1\" #>  #> $Kruskall.Wallis #> $Kruskall.Wallis[[1]] #>  #>  Kruskal-Wallis rank sum test #>  #> data:  rel_abundance by group #> Kruskal-Wallis chi-squared = 17.77, df = 5, p-value = 0.003249 #>  #>  #>  #> $Plot #>  #> $Pairwise #> $Pairwise$p.values #>       AE    B6    GH    Hu    QM    TA #> AE    NA 0.029 0.343 0.029 0.029 0.114 #> B6 0.029    NA 0.029 0.057 0.057 0.343 #> GH 0.343 0.029    NA 0.029 0.057 0.114 #> Hu 0.029 0.057 0.029    NA 0.029 0.114 #> QM 0.029 0.057 0.057 0.029    NA 0.686 #> TA 0.114 0.343 0.114 0.114 0.686    NA #>  #> $Pairwise$significant #> [1] \"AE ~ B6\" \"AE ~ Hu\" \"AE ~ QM\" \"B6 ~ GH\" \"GH ~ Hu\" \"Hu ~ QM\" #>  #>  #> $Name #> [1] \"G2S2\" #>  #> $Kruskall.Wallis #> $Kruskall.Wallis[[1]] #>  #>  Kruskal-Wallis rank sum test #>  #> data:  rel_abundance by group #> Kruskal-Wallis chi-squared = 16.271, df = 6, p-value = 0.01237 #>  #>  #>  #> $Plot #>  #> $Pairwise #> $Pairwise$p.values #>       AE    B6    GH    Hu    Mo    QM    TA #> AE    NA 0.029 0.486 0.114 0.200 0.114 0.200 #> B6 0.029    NA 0.029 0.029 0.686 0.686 0.343 #> GH 0.486 0.029    NA 0.029 0.343 0.200 0.343 #> Hu 0.114 0.029 0.029    NA 0.029 0.029 0.029 #> Mo 0.200 0.686 0.343 0.029    NA 0.686 0.343 #> QM 0.114 0.686 0.200 0.029 0.686    NA 0.686 #> TA 0.200 0.343 0.343 0.029 0.343 0.686    NA #>  #> $Pairwise$significant #> [1] \"AE ~ B6\" \"B6 ~ GH\" \"B6 ~ Hu\" \"GH ~ Hu\" \"Hu ~ Mo\" \"Hu ~ QM\" \"Hu ~ TA\" group_test(df = mice, x = \"group\", y = \"rel_abundance\", id_col = \"id\")[2] #> [[1]] analyze(df = mice, col = \"Allele\", x = \"group\", y = \"rel_abundance\",             id_col = \"id\", filter_str = \"A1FB\", p_value = .05) #> $Name #> [1] \"A1FB\" #>  #> $Kruskall.Wallis #> $Kruskall.Wallis[[1]] #>  #>  Kruskal-Wallis rank sum test #>  #> data:  rel_abundance by group #> Kruskal-Wallis chi-squared = 15.543, df = 4, p-value = 0.003698 #>  #>  #>  #> $Plot #>  #> $Pairwise #> $Pairwise$p.values #>       AE    Ag    Hu    QM    TA #> AE    NA 0.029 0.486 0.029 0.486 #> Ag 0.029    NA 0.029 0.029 0.029 #> Hu 0.486 0.029    NA 0.029 0.200 #> QM 0.029 0.029 0.029    NA 0.029 #> TA 0.486 0.029 0.200 0.029    NA #>  #> $Pairwise$significant #> [1] \"AE ~ Ag\" \"AE ~ QM\" \"Ag ~ Hu\" \"Ag ~ QM\" \"Ag ~ TA\" \"Hu ~ QM\" \"QM ~ TA\""},{"path":"https://ellieanderson.github.io/sugaR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ellie Anderson. Maintainer.","code":""},{"path":"https://ellieanderson.github.io/sugaR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Anderson E (2024). sugaR: Pipeline Glycan Analysis. R package version 0.1.0, https://ellieanderson.github.io/sugaR/.","code":"@Manual{,   title = {sugaR: Pipeline for Glycan Analysis},   author = {Ellie Anderson},   year = {2024},   note = {R package version 0.1.0},   url = {https://ellieanderson.github.io/sugaR/}, }"},{"path":"https://ellieanderson.github.io/sugaR/index.html","id":"sugar","dir":"","previous_headings":"","what":"Pipeline for Glycan Analysis","title":"Pipeline for Glycan Analysis","text":"pipeline analyze glycan data","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/analyze.html","id":null,"dir":"Reference","previous_headings":"","what":"Loop the whole thing — analyze","title":"Loop the whole thing — analyze","text":"Loop whole thing","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/analyze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loop the whole thing — analyze","text":"","code":"analyze(df, col, x, y, p_value, id_col, filter_str = NULL, display_all = FALSE)"},{"path":"https://ellieanderson.github.io/sugaR/reference/analyze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loop the whole thing — analyze","text":"df Dataframe containing biological data long format col Column observations tested x Grouping column y Numeric column used kruskal-wallis wilcoxon tests p_value Numeric value 0 1 determining significance id_col Column unique ids filter_str Optional string filter dataframe - col filtered display_all TRUE/FALSE Default FALSE. FALSE, significant results displayed","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/analyze.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loop the whole thing — analyze","text":"Returns named list results","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/check_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Check group size — check_groups","title":"Check group size — check_groups","text":"order functions accurate, size group needs greater 1.","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/check_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check group size — check_groups","text":"","code":"check_groups(df, group_col, id_col)"},{"path":"https://ellieanderson.github.io/sugaR/reference/check_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check group size — check_groups","text":"df Dataframe containing groups tested group_col Column data containing groups id_col Column data containing unique IDs","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/check_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check group size — check_groups","text":"Cleaned dataframe groups removed meet criteria group size > 1.","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/create_time_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create one dataframe with all timepoints — create_time_data","title":"Create one dataframe with all timepoints — create_time_data","text":"Create one dataframe timepoints","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/create_time_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create one dataframe with all timepoints — create_time_data","text":"","code":"create_time_data(...)"},{"path":"https://ellieanderson.github.io/sugaR/reference/create_time_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create one dataframe with all timepoints — create_time_data","text":"... list files read . already clean files need include columns order important well files inserted order created, .e. earliest timepoint first, second timepoint second, etc.","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/create_time_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create one dataframe with all timepoints — create_time_data","text":"single dataframe lists samples timepoint.","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/get_percs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calcuate glycan component percentages — get_percs","title":"Calcuate glycan component percentages — get_percs","text":"Calcuate glycan component percentages","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/get_percs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calcuate glycan component percentages — get_percs","text":"","code":"get_percs(data, glycan, id_col)"},{"path":"https://ellieanderson.github.io/sugaR/reference/get_percs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calcuate glycan component percentages — get_percs","text":"glycan specific binary glycan component column id_col column holds unique ids samples dataframe fed function must include columns `Area`, `adj_area`, `total_area`, `adj_tot_area`. df dataframe","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/get_percs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calcuate glycan component percentages — get_percs","text":"dataframe new column abundance glycan component","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/get_tots.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate total relative abundance for glycan component — get_tots","title":"Calculate total relative abundance for glycan component — get_tots","text":"Calculate total relative abundance glycan component","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/get_tots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate total relative abundance for glycan component — get_tots","text":"","code":"get_tots(df, glycan, unique_id, species)"},{"path":"https://ellieanderson.github.io/sugaR/reference/get_tots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate total relative abundance for glycan component — get_tots","text":"df Dataframe including columns `adj_area` `adj_tot_area` glycan Glycan component total abundance calculated unique_id Column containing unique id sample species Column containing different glycan species","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/get_tots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate total relative abundance for glycan component — get_tots","text":"dataframe used function additional column total abundance glycan components 1 2 component options.","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/group_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Between groups testing — group_test","title":"Between groups testing — group_test","text":"function takes dataframe uses kruskal-wallis test determine groups come distribution .","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/group_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Between groups testing — group_test","text":"","code":"group_test(df, x, y, id_col, filter_col = NULL, filter_str = NULL)"},{"path":"https://ellieanderson.github.io/sugaR/reference/group_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Between groups testing — group_test","text":"df Dataframe containing groups tested x Independent variable kruskal-wallis test y Dependent variable kruskal-wallis test filter_col Column filtered filter_str Filtering condition","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/group_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Between groups testing — group_test","text":"List containing kruskal-wallis results visualization","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/pair_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise Comparisons — pair_test","title":"Pairwise Comparisons — pair_test","text":"pairwise comparisons one swoop","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/pair_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise Comparisons — pair_test","text":"","code":"pair_test(   df,   values,   groups,   p_value,   id_col,   filter_str = NULL,   filter_col = NULL )"},{"path":"https://ellieanderson.github.io/sugaR/reference/pair_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise Comparisons — pair_test","text":"df Dataframe comparisons values Numeric column df groups Factor character column df p_value Value 0 1 indicating level significance id_col Column unique IDs used check group sizes filter_str Optional string supplied filtering within function filter_col Optional column supplied filtering within function. Must present filter_str supplied","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/pair_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise Comparisons — pair_test","text":"Returns matrix object","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/plot_overall.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot barcharts for overall comparison — plot_overall","title":"Plot barcharts for overall comparison — plot_overall","text":"Plot barcharts overall comparison","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/plot_overall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot barcharts for overall comparison — plot_overall","text":"","code":"plot_overall(df, x, y, group)"},{"path":"https://ellieanderson.github.io/sugaR/reference/plot_overall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot barcharts for overall comparison — plot_overall","text":"df Dataframe x column categorical data y Column y axis - numeric group Group color - categorical","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/plot_overall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot barcharts for overall comparison — plot_overall","text":"list plots","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/plot_time_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize trends over time — plot_time_data","title":"Visualize trends over time — plot_time_data","text":"Visualize trends time","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/plot_time_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize trends over time — plot_time_data","text":"","code":"plot_time_data(   df,   x,   y,   id_col,   color_col = NULL,   filter_str = NULL,   filter_col = NULL )"},{"path":"https://ellieanderson.github.io/sugaR/reference/plot_time_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize trends over time — plot_time_data","text":"df dataframe multiple timepoints x column provide x axis data. case function, measure time. y Column provide y axis data. id_col Column indicates grouping factor connecting points color_col Optional column determine plot colored filter_str Optional argument allows dataframe filtered within function - provide desired filtering string filter_col Column filtered within dataframe. filter_str provided, also must present","code":""},{"path":"https://ellieanderson.github.io/sugaR/reference/plot_time_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize trends over time — plot_time_data","text":"single dataframe lists samples timepoint.","code":""}]
