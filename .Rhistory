}
return(final_results)
}
results <- analyze(mice, "Allele", x = "group", y = "rel_abundance",
p_value = .05, id_col = "id")
#' @param id_col Column with unique ids
#' @param filter_str Optional string to filter dataframe by -
#' col will be filtered by it
#' @param display_all TRUE/FALSE Default is FALSE. When FALSE, only the significant
#' results will be displayed
#'
#' @return Returns named list of results
#' @export
#'
#' @examples
analyze <- function(df, col, x, y, p_value, id_col,
filter_str = NULL, display_all = FALSE){
final_results <- list()
the_matrix <- matrix()
# need to convert the string to a name from the dataframe
col <- as.name(col)
x <- as.name(x)
y <- as.name(y)
id_col <- as.name(id_col)
# get the unique observations of object being tested -
# the df will be filtered for each of these observations
# and then tested for that unique observation
if(!is.null(filter_str)){
name_list <- filter_str
} else{
name_list <- unique(df[[col]])
}
# go through all the unique observations
for (a in name_list) {
# print(a)
# if filtering arguments are present...
if(!is.null(filter_str)){
# declare filter string
filt <- filter_str
} else {
# otherwise, the filtering string will be whatever
# observation the loop is on
filt <- a
}
# test if treatment groups are all the same
te <- group_test(df = df, x = x, y = y, id_col = {{id_col}},
filter_str = filt, filter_col = {{col}})
if(!is.null(te)){
# if there's a difference...
if (te[[1]]$p.value < .05) {
# TODO: change .05 to variable?
# TODO: add check to make sure te pval isn't NA
# run pairwise tests
l <- df %>%
pair_test(values = y, groups = x, p_value = p_value,
id_col = {{id_col}}, filter_col = {{col}},
filter_str = filt)
if(any(l[[1]] < p_value, na.rm = TRUE) | isTRUE(display_all)){
# show the pairwise comparison results
plt <- te[2][[1]]
w <- 1
heights <- list()
for (i in 1:length(l$significant)){
h <- w*max(plt$data[[y]])
w <- w + .1
heights <- append(heights, h)
}
plt_fin <- plt +
ggsignif::geom_signif(mapping = aes(group = as.factor({{x}})),
comparisons = lapply(l[2][[1]],
function(st) unlist(str_split(st, " ~ "))),
map_signif_level = c("*" = .05),
y_position = unlist(heights),
vjust = .5)
final_results <- final_results %>%
append(list("Name" = a,
"Kruskall.Wallis" = te[1],
"Plot" = plt_fin,
"Pairwise" = l))
} else{
print(paste("No significant pairwise comparisons for ", a))
}
} else {  # if no difference between treatment groups...
# print(a)
print(paste("No significant difference for", a))
}
} else {
print("No comparisons run")
}
}
return(final_results)
}
results <- analyze(mice, "Allele", x = "group", y = "rel_abundance",
p_value = .05, id_col = "id")
#' @param id_col Column with unique ids
#' @param filter_str Optional string to filter dataframe by -
#' col will be filtered by it
#' @param display_all TRUE/FALSE Default is FALSE. When FALSE, only the significant
#' results will be displayed
#'
#' @return Returns named list of results
#' @export
#'
#' @examples
analyze <- function(df, col, x, y, p_value, id_col,
filter_str = NULL, display_all = FALSE){
final_results <- list()
the_matrix <- matrix()
# need to convert the string to a name from the dataframe
col <- as.name(col)
x <- as.name(x)
y <- as.name(y)
id_col <- as.name(id_col)
# get the unique observations of object being tested -
# the df will be filtered for each of these observations
# and then tested for that unique observation
if(!is.null(filter_str)){
name_list <- filter_str
} else{
name_list <- unique(df[[col]])
}
# go through all the unique observations
for (a in name_list) {
# print(a)
# if filtering arguments are present...
if(!is.null(filter_str)){
# declare filter string
filt <- filter_str
} else {
# otherwise, the filtering string will be whatever
# observation the loop is on
filt <- a
}
# test if treatment groups are all the same
te <- group_test(df = df, x = x, y = y, id_col = {{id_col}},
filter_str = filt, filter_col = {{col}})
if(!is.null(te)){
# if there's a difference...
if (te[[1]]$p.value < .05) {
# TODO: change .05 to variable?
# TODO: add check to make sure te pval isn't NA
# run pairwise tests
l <- df %>%
pair_test(values = y, groups = x, p_value = p_value,
id_col = {{id_col}}, filter_col = {{col}},
filter_str = filt)
if(any(l[[1]] < p_value, na.rm = TRUE) | isTRUE(display_all)){
# show the pairwise comparison results
plt <- te[2][[1]]
w <- 1
heights <- list()
for (i in 1:length(l$significant)){
h <- w*max(plt$data[[y]])
w <- w + .1
heights <- append(heights, h)
}
plt_fin <- plt +
ggsignif::geom_signif(mapping = aes(group = as.factor({{x}})),
comparisons = lapply(l[2][[1]],
function(st) unlist(str_split(st, " ~ "))),
map_signif_level = c("*" = .05),
y_position = unlist(heights),
vjust = .5)
final_results <- final_results %>%
append(list("Name" = a,
"Kruskall.Wallis" = te[1],
"Plot" = plt_fin,
"Pairwise" = l))
} else{
print(paste("No significant pairwise comparisons for ", a))
}
} else {  # if no difference between treatment groups...
# print(a)
print(paste("No significant difference between groups for", a))
}
} else {
print("No comparisons run")
}
}
return(final_results)
}
results <- analyze(mice, "Allele", x = "group", y = "rel_abundance",
p_value = .05, id_col = "id")
results$Name
results$Kruskall.Wallis
results$Kruskall.Wallis %>% unlist
results$Kruskall.Wallis$p-value
results$Kruskall.Wallis$p.value
results$Kruskall.Wallis[[1]]
results$Kruskall.Wallis[[1]]$p.value
te[1]
te[1][[1]]
#' @param id_col Column with unique ids
#' @param filter_str Optional string to filter dataframe by -
#' col will be filtered by it
#' @param display_all TRUE/FALSE Default is FALSE. When FALSE, only the significant
#' results will be displayed
#'
#' @return Returns named list of results
#' @export
#'
#' @examples
analyze <- function(df, col, x, y, p_value, id_col,
filter_str = NULL, display_all = FALSE){
final_results <- list()
the_matrix <- matrix()
# need to convert the string to a name from the dataframe
col <- as.name(col)
x <- as.name(x)
y <- as.name(y)
id_col <- as.name(id_col)
# get the unique observations of object being tested -
# the df will be filtered for each of these observations
# and then tested for that unique observation
if(!is.null(filter_str)){
name_list <- filter_str
} else{
name_list <- unique(df[[col]])
}
# go through all the unique observations
for (a in name_list) {
# print(a)
# if filtering arguments are present...
if(!is.null(filter_str)){
# declare filter string
filt <- filter_str
} else {
# otherwise, the filtering string will be whatever
# observation the loop is on
filt <- a
}
# test if treatment groups are all the same
te <- group_test(df = df, x = x, y = y, id_col = {{id_col}},
filter_str = filt, filter_col = {{col}})
if(!is.null(te)){
# if there's a difference...
if (te[[1]]$p.value < .05) {
# TODO: change .05 to variable?
# TODO: add check to make sure te pval isn't NA
# run pairwise tests
l <- df %>%
pair_test(values = y, groups = x, p_value = p_value,
id_col = {{id_col}}, filter_col = {{col}},
filter_str = filt)
if(any(l[[1]] < p_value, na.rm = TRUE) | isTRUE(display_all)){
# show the pairwise comparison results
plt <- te[2][[1]]
w <- 1
heights <- list()
for (i in 1:length(l$significant)){
h <- w*max(plt$data[[y]])
w <- w + .1
heights <- append(heights, h)
}
plt_fin <- plt +
ggsignif::geom_signif(mapping = aes(group = as.factor({{x}})),
comparisons = lapply(l[2][[1]],
function(st) unlist(str_split(st, " ~ "))),
map_signif_level = c("*" = .05),
y_position = unlist(heights),
vjust = .5)
final_results <- final_results %>%
append(list("Name" = a,
"Kruskall.Wallis" = te[1][[1]],
"Plot" = plt_fin,
"Pairwise" = l))
} else{
print(paste("No significant pairwise comparisons for ", a))
}
} else {  # if no difference between treatment groups...
# print(a)
print(paste("No significant difference between groups for", a))
}
} else {
print("No comparisons run")
}
}
return(final_results)
}
results <- analyze(mice, "Allele", x = "group", y = "rel_abundance",
p_value = .05, id_col = "id")
results$Kruskall.Wallis
results
library(sugaR)
#' @param id_col Column with unique ids
#' @param filter_str Optional string to filter dataframe by -
#' col will be filtered by it
#' @param display_all TRUE/FALSE Default is FALSE. When FALSE, only the significant
#' results will be displayed
#'
#' @return Returns named list of results
#' @export
#'
#' @examples
analyze <- function(df, col, x, y, p_value, id_col,
filter_str = NULL, display_all = FALSE){
final_results <- list()
the_matrix <- matrix()
# need to convert the string to a name from the dataframe
col <- as.name(col)
x <- as.name(x)
y <- as.name(y)
id_col <- as.name(id_col)
# get the unique observations of object being tested -
# the df will be filtered for each of these observations
# and then tested for that unique observation
if(!is.null(filter_str)){
name_list <- filter_str
} else{
name_list <- unique(df[[col]])
}
# go through all the unique observations
for (a in name_list) {
# print(a)
# if filtering arguments are present...
if(!is.null(filter_str)){
# declare filter string
filt <- filter_str
} else {
# otherwise, the filtering string will be whatever
# observation the loop is on
filt <- a
}
# test if treatment groups are all the same
te <- group_test(df = df, x = x, y = y, id_col = {{id_col}},
filter_str = filt, filter_col = {{col}})
if(!is.null(te)){
# if there's a difference...
if (te[[1]]$p.value < .05) {
# TODO: change .05 to variable?
# TODO: add check to make sure te pval isn't NA
# run pairwise tests
l <- df %>%
pair_test(values = y, groups = x, p_value = p_value,
id_col = {{id_col}}, filter_col = {{col}},
filter_str = filt)
if(any(l[[1]] < p_value, na.rm = TRUE) | isTRUE(display_all)){
# show the pairwise comparison results
plt <- te[2][[1]]
w <- 1
heights <- list()
for (i in 1:length(l$significant)){
h <- w*max(plt$data[[y]])
w <- w + .1
heights <- append(heights, h)
}
plt_fin <- plt +
ggsignif::geom_signif(mapping = aes(group = as.factor({{x}})),
comparisons = lapply(l[2][[1]],
function(st) unlist(str_split(st, " ~ "))),
map_signif_level = c("*" = .05),
y_position = unlist(heights),
vjust = .5)
final_results <- final_results %>%
append(list("Name" = a,
"Kruskall.Wallis" = te[1][[1]],
"Plot" = plt_fin,
"Pairwise" = l))
} else{
print(paste("No significant pairwise comparisons for ", a))
}
} else {  # if no difference between treatment groups...
# print(a)
cat("No significant difference between groups for", a)
}
} else {
print("No comparisons run")
}
}
return(final_results)
}
results <- analyze(mice, "Allele", x = "group", y = "rel_abundance",
p_value = .05, id_col = "id")
#' @param id_col Column with unique ids
#' @param filter_str Optional string to filter dataframe by -
#' col will be filtered by it
#' @param display_all TRUE/FALSE Default is FALSE. When FALSE, only the significant
#' results will be displayed
#'
#' @return Returns named list of results
#' @export
#'
#' @examples
analyze <- function(df, col, x, y, p_value, id_col,
filter_str = NULL, display_all = FALSE){
final_results <- list()
the_matrix <- matrix()
# need to convert the string to a name from the dataframe
col <- as.name(col)
x <- as.name(x)
y <- as.name(y)
id_col <- as.name(id_col)
# get the unique observations of object being tested -
# the df will be filtered for each of these observations
# and then tested for that unique observation
if(!is.null(filter_str)){
name_list <- filter_str
} else{
name_list <- unique(df[[col]])
}
# go through all the unique observations
for (a in name_list) {
# print(a)
# if filtering arguments are present...
if(!is.null(filter_str)){
# declare filter string
filt <- filter_str
} else {
# otherwise, the filtering string will be whatever
# observation the loop is on
filt <- a
}
# test if treatment groups are all the same
te <- group_test(df = df, x = x, y = y, id_col = {{id_col}},
filter_str = filt, filter_col = {{col}})
if(!is.null(te)){
# if there's a difference...
if (te[[1]]$p.value < .05) {
# TODO: change .05 to variable?
# TODO: add check to make sure te pval isn't NA
# run pairwise tests
l <- df %>%
pair_test(values = y, groups = x, p_value = p_value,
id_col = {{id_col}}, filter_col = {{col}},
filter_str = filt)
if(any(l[[1]] < p_value, na.rm = TRUE) | isTRUE(display_all)){
# show the pairwise comparison results
plt <- te[2][[1]]
w <- 1
heights <- list()
for (i in 1:length(l$significant)){
h <- w*max(plt$data[[y]])
w <- w + .1
heights <- append(heights, h)
}
plt_fin <- plt +
ggsignif::geom_signif(mapping = aes(group = as.factor({{x}})),
comparisons = lapply(l[2][[1]],
function(st) unlist(str_split(st, " ~ "))),
map_signif_level = c("*" = .05),
y_position = unlist(heights),
vjust = .5)
final_results <- final_results %>%
append(list("Name" = a,
"Kruskall.Wallis" = te[1][[1]],
"Plot" = plt_fin,
"Pairwise" = l))
} else{
print(paste("No significant pairwise comparisons for ", a))
}
} else {  # if no difference between treatment groups...
# print(a)
cat("No significant difference between groups for", a, "\n")
}
} else {
print("No comparisons run")
}
}
return(final_results)
}
results <- analyze(mice, "Allele", x = "group", y = "rel_abundance",
p_value = .05, id_col = "id")
library(sugaR)
library(sugaR)
library(tidyverse)
library(pander)
`Dye/Sample Peak` <- c("B, 22", "B, 25", "B, 28")
`Sample File Name` <- c("sample 1", "sample 1", "sample 1")
Marker <- c("Glycan", "Glycan", "Glycan")
Allele <- c("G1S1", "G1FS1", "G2FS1")
Size <- c(193.54, 213.76, 239.65)
Height <- c(94, 1804, 6094)
Area <- c(1117, 23954, 88032)
dat_example <- cbind(`Dye/Sample Peak`, `Sample File Name`,
Marker, Allele, Size, Height, Area)
pander(dat_example)
# TODO: add in saturated column requirement
view(dat_example)
mice <- readRDS("../fake_mice_serum.rds")
head(mice) %>% pander()
mice <- readRDS("/fake_mice_serum.rds")
mice <- readRDS("./fake_mice_serum.rds")
view(mice)
mice %>%
get_percs(glycan = "G", id_col = "id") %>%
ungroup() %>%
select(c(group, Allele, size, height, Area, id, adj_area, total_area, adj_tot_area,
rel_abundance, G_perc)) %>%
head() %>%
pander()
mice %>%
get_percs(glycan = "G", id_col = "id") %>%
ungroup() %>%
select(c(group, Allele, size, height, Area, id, adj_area, total_area, adj_tot_area,
rel_abundance, G_perc)) %>%
head() %>% view()
mice %>%
get_percs(glycan = "G", id_col = "id") %>%
get_percs(glycan = "G2", id_col = "id") %>%
get_tots(glycan = "G", unique_id = "id", species = "Allele") %>%
ungroup() %>%
select(c(group, Allele, size, height, Area, id, adj_area, total_area, adj_tot_area,
rel_abundance, G_perc, G2_perc, tot_G)) %>%
head() %>% view()
analyze(df = mice,
col = "Allele",
x = "group",
y = "rel_abundance",
p_value = .05,
id_col = "id")
group_test(df = mice, x = "group", y = "rel_abundance", id_col = "id")[2]
group_test(df = mice, x = "group", y = "rel_abundance", id_col = "id")[1]
