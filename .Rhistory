print(control_prob, drug_prob)
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
print(c(control_prob, drug_prob))
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- true_OR * control_prob
print(c(control_prob, drug_prob))
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
# Define the control group outcome probabilities
control_probs <- c(0.15, 0.35, 0.5, 0.75)
drug_probs <- c(.055, .15, .25, .5)
# Initialize an empty vector to store the results
results <- vector("numeric", length(control_probs))
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- drug_probs[i]
print(c(control_prob, drug_prob))
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
# Create a data frame for plotting
plot_data <- data.frame(Control_Risk = control_probs, Delta = results)
# Create a plot
ggplot(plot_data, aes(x = Control_Risk, y = Delta)) +
geom_point() +
geom_line() +
labs(
x = "Risk in Control Group",
y = "Mean Difference (OR - RR)",
title = "Relationship Between OR and RR in Simulated Trials"
)
# Define the control group outcome probabilities
drug_probs <- c(0.15, 0.35, 0.5, 0.75)
control_probs <- c(.055, .15, .25, .5)
# Initialize an empty vector to store the results
results <- vector("numeric", length(control_probs))
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- drug_probs[i]
print(c(control_prob, drug_prob))
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
# Create a data frame for plotting
plot_data <- data.frame(Control_Risk = control_probs, Delta = results)
# Create a plot
ggplot(plot_data, aes(x = Control_Risk, y = Delta)) +
geom_point() +
geom_line() +
labs(
x = "Risk in Control Group",
y = "Mean Difference (OR - RR)",
title = "Relationship Between OR and RR in Simulated Trials"
)
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / sum(control_group)) / ((1000 - sum(drug_group)) / (1000 - sum(control_group)))
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- drug_probs[i]
print(c(control_prob, drug_prob))
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / sum(control_group)) / ((1000 - sum(drug_group)) / (1000 - sum(control_group)))
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
# Create a data frame for plotting
plot_data <- data.frame(Control_Risk = control_probs, Delta = results)
# Create a plot
ggplot(plot_data, aes(x = Control_Risk, y = Delta)) +
geom_point() +
geom_line() +
labs(
x = "Risk in Control Group",
y = "Mean Difference (OR - RR)",
title = "Relationship Between OR and RR in Simulated Trials"
)
x <- c(-1, -1, 0, 0, 0, 0, 1, 1, 1)
y <- c(2, 3, 6, 7, 8, 9, 10, 12, 15)
glm(y ~ x)
glm(y ~ x) %>% summary()
library(tidyverse)
x <- c(-1, -1, 0, 0, 0, 0, 1, 1, 1)
y <- c(2, 3, 6, 7, 8, 9, 10, 12, 15)
glm(y ~ x) %>% summary()
glm(x ~ y) %>% summary()
glm(x ~ y, family = poisson(link = "log")) %>% summary()
glm(y ~ x, family = poisson(link = "log")) %>% summary()
source("~/.active-rstudio-document", echo=TRUE)
}
## Example: Y ~ Poisson, link function = identity, g(mu) = b0 + b1*x
f.iwls <- function(d,b,niter=1)
{
X <- cbind(1,d[,"x"]) # Design matrix
bb <- b
for(i in 1:niter) {
W <- diag(exp(b[1]+b[2]*d[,"x"])) # W diagonal matrix
z <- as.matrix(b[1] + b[2]*d[,"x"] + (d[,"y"]/(b[1] + b[2]*d[,"x"])) - 1) # z vector
b <- solve(t(X)%*%W%*%X)%*%t(X)%*%W%*%z # MLE
bb <- rbind(bb, t(b))
}
return(list(b=b,Information=t(X)%*%W%*%X, bb=bb))
}
f.iwls(d1, b = c(7, 5), niter = 6)
d1 <- as.data.frame(cbind(y=y,x=x))
f.iwls(d1, b = c(7, 5), niter = 6)
f.iwls(d1, b = c(7.29, 4.83), niter = 6)
f.iwls(d1, b = c(1, 2), niter = 6)
## Example: Y ~ Poisson, link function = identity, g(mu) = b0 + b1*x
f.iwls <- function(d,b,niter=1)
{
X <- cbind(1,d[,"x"]) # Design matrix
bb <- b
for(i in 1:niter) {
W <- diag(exp(b[1]+b[2]*d[,"x"])) # W diagonal matrix
z <- as.matrix(b[1] + b[2]*d[,"x"] + (d[,"y"]/(b[1]+b[2]*d[,"x"])) - 1) # z vector
b <- solve(t(X)%*%W%*%X)%*%t(X)%*%W%*%z # MLE
bb <- rbind(bb, t(b))
}
return(list(b=b,Information=t(X)%*%W%*%X, bb=bb))
}
f.iwls(d1, b = c(1, 2), niter = 6)
# Using glm() function in R
x <- c(-1, -1, 0, 0, 0, 0, 1, 1, 1)
y <- c(2, 3, 6, 7, 8, 9, 10, 12, 15)
d1 <- as.data.frame(cbind(y=y,x=x))
## Example: Y ~ Poisson, link function = identity, g(mu) = b0 + b1*x
f.iwls <- function(d,b,niter=1)
{
X <- cbind(1,d[,"x"]) # Design matrix
bb <- b
for(i in 1:niter) {
W <- diag(exp(b[1]+b[2]*d[,"x"])) # W diagonal matrix
z <- as.matrix(b[1] + b[2]*d[,"x"] + (d[,"y"]/(b[1]+b[2]*d[,"x"])) - 1) # z vector
b <- solve(t(X)%*%W%*%X)%*%t(X)%*%W%*%z # MLE
bb <- rbind(bb, t(b))
}
return(list(b=b,Information=t(X)%*%W%*%X, bb=bb))
}
f.iwls(d1, b = c(1, 2), niter = 6)
## Example: Y ~ Poisson, link function = identity, g(mu) = b0 + b1*x
f.iwls <- function(d,b,niter=1)
{
X <- cbind(1,d[,"x"]) # Design matrix
bb <- b
for(i in 1:niter) {
W <- diag(b[1]+b[2]*d[,"x"]) # W diagonal matrix
z <- as.matrix(b[1] + b[2]*d[,"x"] + (d[,"y"]/(b[1]+b[2]*d[,"x"])) - 1) # z vector
b <- solve(t(X)%*%W%*%X)%*%t(X)%*%W%*%z # MLE
bb <- rbind(bb, t(b))
}
return(list(b=b,Information=t(X)%*%W%*%X, bb=bb))
}
f.iwls(d1, b = c(1, 2), niter = 6)
## Example: Y ~ Poisson, link function = identity, g(mu) = b0 + b1*x
f.iwls <- function(d,b,niter=1)
{
X <- cbind(1,d[,"x"]) # Design matrix
bb <- b
for(i in 1:niter) {
W <- diag(exp(b[1]+b[2]*d[,"x"])) # W diagonal matrix
z <- as.matrix(b[1] + b[2]*d[,"x"] + (d[,"y"]/exp(b[1]+b[2]*d[,"x"])) - 1) # z vector
b <- solve(t(X)%*%W%*%X)%*%t(X)%*%W%*%z # MLE
bb <- rbind(bb, t(b))
}
return(list(b=b,Information=t(X)%*%W%*%X, bb=bb))
}
f.iwls(d1, b = c(1, 2), niter = 6)
parms <- f.iwls(d1, b = c(1, 2), niter = 6)
solve(parms$Information)
glm(y ~ x, family = poisson(link = "log")) %>% summary()
install.packages("pkgdown")
library(pkgdown)
usethis():use_pkgdown()
usethis::use_pkgdown()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
build_site()
usethis::use_pkgdown_github_pages()
build_site()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
library(usethis)
use_pkgdown_github_pages()
# pacman::p_load(tidyverse, mosaic, magrittr, readxl, car, ggsignif, paletteer, rlang)
require(usethis)
?require
usethis:use_package("testthat")
usethis::use_package("testthat")
usethis::use_package("usethis")
train <- read_csv("/Users/ellieanderson/Library/Mobile Documents/iCloud~com~getrocketbook~Rocketbook/Documents/BIOSTAT707/train.txt")
library(tidyverse)
train <- read_csv("/Users/ellieanderson/Library/Mobile Documents/iCloud~com~getrocketbook~Rocketbook/Documents/BIOSTAT707/train.txt")
view(train)
train <- read_table("/Users/ellieanderson/Library/Mobile Documents/iCloud~com~getrocketbook~Rocketbook/Documents/BIOSTAT707/train.txt")
view(train)
?read.table()
train <- read.table("/Users/ellieanderson/Library/Mobile Documents/iCloud~com~getrocketbook~Rocketbook/Documents/BIOSTAT707/train.txt",
header = TRUE)
view(train)
train_x <- train[, -1]
names(train_x)
names(train)
train_y <- train[, 1]
length(train_x)
nrow(train_x)
train_x <- train_x[1:8000,]
train_x <- train[1:8000, -1]
train_y <- train[1:8000, 1]
val_x <- train[2000, -1]
val_y <- train[2000, 1]
test <- read.table("/Users/ellieanderson/Library/Mobile Documents/iCloud~com~getrocketbook~Rocketbook/Documents/BIOSTAT707/test.txt",
header = TRUE)
test_x <- test[, -1]
test_y <- test[, 1]
library(sugaR)
# GROUP_TEST
# data
x <- c("ABC", "ABC", "ABC",
"DEF", "DEF", "DEF",
"GHI", "GHI", "GHI", "GHI", "GHI", "GHI")
y <- c(13, 16, 21, 63, 89, 50, 30, 42, 58, 80, 60, 20)
group <- c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)
id <- seq(1:12)
test_dat <- cbind.data.frame(x, y, group, id)
# test
test_that("group_test Kruskal-Wallis test works without filtering",{
actual <- group_test(test_dat, x = "x", y = "y", id_col = "id")[[1]]
expected <- kruskal.test(formula = y ~ x, data = test_dat)
expect_equal(actual, expected, ignore_attr = TRUE)
})
library(testthat)
# test
test_that("group_test Kruskal-Wallis test works without filtering",{
actual <- group_test(test_dat, x = "x", y = "y", id_col = "id")[[1]]
expected <- kruskal.test(formula = y ~ x, data = test_dat)
expect_equal(actual, expected, ignore_attr = TRUE)
})
library(covr)
library(testthat)
library(tidyverse)
library(vdiffr)
library(sugaR)
local_edition(3)
# test
test_that("group_test Kruskal-Wallis test works without filtering",{
actual <- group_test(test_dat, x = "x", y = "y", id_col = "id")[[1]]
expected <- kruskal.test(formula = y ~ x, data = test_dat)
expect_equal(actual, expected, ignore_attr = TRUE)
})
test_that("group_test Kruskal-Wallis test works WITH filtering", {
actual <- group_test(test_dat,
x = "group", y = "y",
id_col = "id",
filter_col = "x",
filter_str = "GHI")[[1]]
expected <- test_dat %>%
filter(x == "GHI") %>%
kruskal.test(formula = y ~ group, data = .)
expect_equal(actual, expected, ignore_attr = TRUE)
})
test_dat
test_that("group_test plot is working without filtering",{
p <- ggplot(test_dat,
aes(x = as.factor(group),
y = y,
group = as.factor(group))) +
geom_boxplot() +
theme_bw() +
labs(title = "Plot", x = "Group")
actual <- group_test(test_dat,
x = "group", y = "y",
id_col = "id")[[2]]
create_reference_image(p, "reference.svg")
expect_image_equal(actual, "reference.svg")
})
test_that("group_test plot is working with filtering",{
p <- ggplot(test_dat %>% filter(group == "GHI"),
aes(x = as.factor(group),
y = y,
group = as.factor(group))) +
geom_boxplot() +
theme_bw() +
labs(title = "Plot", x = "Group")
actual <- group_test(test_dat,
x = "group", y = "y",
id_col = "id",
filter_col = "x",
filter_str = "GHI")[[2]]
create_reference_image(p, "reference.svg")
expect_image_equal(actual, "reference.svg")
})
# PAIR TEST
# data
group <- c(1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2)
y <- c(rnorm(6, mean = 5, sd = 2), rnorm(6, mean = 25, sd = 5))
id <- seq(1:12)
x <- c("ABC", "ABC", "DEF", "DEF", "DEF", "DEF",
"DEF", "DEF", "DEF", "DEF", "GHI", "GHI")
pair <- cbind(group, y, id, x) %>% as.data.frame()
# test
test_that("pair_test works without filtering", {
actual <- pair_test(pair,
values = "y",
groups = "group",
p_value = .05,
id_col = "id")$p.values[1,2]
expected <- wilcox.test(as.numeric(y) ~ group, data = pair)$p.value
expect_equal(actual, expected, ignore_attr = TRUE)
})
test_that("pair_test works with filtering", {
actual <- pair_test(pair,
values = "y",
groups = "group",
filter_str = "DEF",
filter_col = "x",
p_value = .05,
id_col = "id")$p.values[1,2]
expected <- pair %>%
filter(x == "DEF") %>%
{wilcox.test(formula = as.numeric(.$y) ~ .$group)$p.value}
expect_equal(actual, expected, ignore_attr = TRUE)
})
test_that("pair_test finds significant comparisons", {
actual <- pair_test(pair,
values = "y",
groups = "group",
p_value = .05,
id_col = "id")$significant
expected <- list(paste("1,2"))
expect_equal(actual, expected, ignore_attr = TRUE)
})
# CHECK_GROUPS
# data
id <- seq(1:12)
group <- c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)
check1 <- cbind(id, group) %>% as.data.frame()
test_that("checking groups is working", {
actual <- check_groups(check1, group, id)
expected <- check1
expect_equal(actual, expected, ignore_attr = TRUE)
})
test_that("analyze is working", {
x <- analyze(test_dat, "group", "x", "y", .05, "id")
expect_equal(x, list())
})
test_that("analyze is working", {
x <- analyze(test_dat, "group", "x", "y", .05, "id")
expect_equal(x, list())
})
test_that("check_groups works in analyze", {
expect_output(analyze(test_dat, "group", "x", "y", .05, "id"),
{cat("c(\"ABC\", \"DEF\") removed due to insufficient sample size")
cat("Not enough groups to run comparison")
cat("[1] \"No comparisons run\"")}
)
})
test_that("analyze works when given an adequate dataframe", {
glycan <- rep("G_perc", 20)
perc <- c(24.1, 21.2, 31.3, 26.8, 29.2, 34.3, 27.3,
26.3, 20.0, 34.2, 34, 24.1, 28.5, 10.9, 20.0,
31, 35.4, 27.7, 30.9, 33)
group <- c(3, 3, 4, 3, 4, 4, 3, 3, 3, 4, 4, 3,
3, 4, 3, 3, 3, 4, 4, 4)
id <- seq(1:20)
test_dat <- cbind.data.frame(id, group, glycan, perc) %>% as_tibble
p <- analyze(test_dat, "glycan", "group", "perc", .05, "id")$Plot %>% suppressWarnings()
w <- ggplot(test_dat, aes(x = as.factor(group), y = perc, group = as.factor(group))) +
geom_boxplot() +
geom_signif(comparisons = list(c("3", "4")),
map_signif_level = TRUE)
suppressWarnings(expect_equal(layer_data(p, 2), layer_data(w, 2), ignore_attr = TRUE))
})
library(sugaR)
#'
#' @param df Dataframe
#' @param x It should be a column of categorical data
#' @param y Column for the y axis - numeric
#' @param group Group for color - categorical
#'
#' @return list of plots
#' @export
#'
#' @examples
plot_overall <- function(df, x, y, group){
x <- as.name(x)
y <- as.name(y)
group <- as.name(group)
a <- df %>%
group_by({{x}}, {{group}}) %>%
summarize(avg = mean({{y}}, na.rm = TRUE)) %>%
ggplot(aes(x = {{x}}, y = avg,
fill = as.factor({{group}}),
group = as.factor({{group}}))) +
geom_col(position = "dodge") +
scale_fill_manual(values = paletteer_d("ggsci::category20_d3")) +
labs(title = str_to_title(paste({{x}}, {{y}}, "Across Groups")),
x = str_to_title(paste({{x}})),
y = str_to_title(paste("Average", {{y}}, "(%)")),
fill = str_to_title(paste({{group}}))) +
theme_bw() +
theme(plot.title = element_text(hjust = .5))
# axis.text.x = element_text(angle = 45,
# vjust = .25))
b <- df %>%
group_by({{x}}, {{group}}) %>%
summarize(avg = mean({{y}}, na.rm = TRUE)) %>%
ggplot(aes(x = as.factor({{group}}), y = avg, fill = {{x}}, group = {{x}})) +
geom_col(position = "dodge") +
scale_fill_manual(values = paletteer_d("ggsci::category20_d3")) +
labs(title = str_to_title(paste0(x, " ", y, " Across ", group, "s")),
x = str_to_title(paste({{group}})),
y = str_to_title(paste("Average", {{y}}, "(%)")),
fill = str_to_title(paste({{x}}))) +
theme_bw() +
theme(plot.title = element_text(hjust = .5),
panel.grid.minor = element_blank())
# axis.text.x = element_text(angle = 45, vjust = .25))
print(a)
print(b)
# TODO: Need to return the plots in a way that they can be tweaked with additional
# aruments. Right now it's not going to happen though.
}
library(sugaR)
library(sugaR)
library(sugaR)
library(sugaR)
library(sugaR)
library(sugaR)
library(sugaR)
