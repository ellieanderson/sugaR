w <- w + .1
heights <- append(heights, h)
}
plt_fin <- plt +
ggsignif::geom_signif(mapping = aes(group = as.factor({{x}})),
comparisons = lapply(l[2][[1]],
function(st) unlist(str_split(st, ","))),
map_signif_level = TRUE,
y_position = unlist(heights))
final_results <- final_results %>%
append(list("Name" = a,
"Kruskall.Wallis" = te[1],
"Plot" = plt_fin,
"Pairwise" = l))
} else{
print(paste("No significant pairwise comparisons for ", a))
}
} else {  # if no difference between treatment groups...
print(a)
print("No significant difference")
}
} else {
print("No comparisons run")
}
}
return(final_results)
}
analyze(df = mice, col = "Allele", x = "group", y = "rel_abundance",
id_col = "id", filter_str = "A1FB", p_value = .05)
analyze(df = mice, col = "Allele", x = "group", y = "rel_abundance",
id_col = "id", p_value = .05)
mice %>% get_percs("G", "Allele")
mice %>% get_percs("G", "Sample File Name")
names(mice)
mice %>% get_percs("G", "id")
mice %>% get_percs("G", "id") %>% view()
plot_overall(mice, "group", "rel_abundance", "Allele")
library(paletteer)
plot_overall(mice, "group", "rel_abundance", "Allele")
mice <- mice %>% mutate(`Relative Abundance` = rel_abundance)
plot_overall(mice, "group", "Relative Abundance", "Allele")
mice <- mice %>% mutate(glycan = Allele)
plot_overall(mice, "group", "Relative Abundance", "glycan")
view(mice)
library(ggsignif)
?geom_signif
#' @param id_col Column with unique ids
#' @param filter_str Optional string to filter dataframe by -
#' col will be filtered by it
#' @param display_all TRUE/FALSE Default is FALSE. When FALSE, only the significant
#' results will be displayed
#'
#' @return Returns named list of results
#' @export
#'
#' @examples
analyze <- function(df, col, x, y, p_value, id_col,
filter_str = NULL, display_all = FALSE){
final_results <- list()
the_matrix <- matrix()
# need to convert the string to a name from the dataframe
col <- as.name(col)
x <- as.name(x)
y <- as.name(y)
id_col <- as.name(id_col)
# get the unique observations of object being tested -
# the df will be filtered for each of these observations
# and then tested for that unique observation
if(!is.null(filter_str)){
name_list <- filter_str
} else{
name_list <- unique(df[[col]])
}
# go through all the unique observations
for (a in name_list) {
# print(a)
# if filtering arguments are present...
if(!is.null(filter_str)){
# declare filter string
filt <- filter_str
} else {
# otherwise, the filtering string will be whatever
# observation the loop is on
filt <- a
}
# test if treatment groups are all the same
te <- group_test(df = df, x = x, y = y, id_col = {{id_col}},
filter_str = filt, filter_col = {{col}})
if(!is.null(te)){
# if there's a difference...
if (te[[1]]$p.value < .05) {
# TODO: change .05 to variable?
# run pairwise tests
l <- df %>%
pair_test(values = y, groups = x, p_value = p_value,
id_col = {{id_col}}, filter_col = {{col}},
filter_str = filt)
if(any(l[[1]] < p_value, na.rm = TRUE) | isTRUE(display_all)){
# show the pairwise comparison results
plt <- te[2][[1]]
w <- 1
heights <- list()
for (i in 1:length(l$significant)){
h <- w*max(plt$data[[y]])
w <- w + .1
heights <- append(heights, h)
}
plt_fin <- plt +
ggsignif::geom_signif(mapping = aes(group = as.factor({{x}})),
comparisons = lapply(l[2][[1]],
function(st) unlist(str_split(st, ","))),
map_signif_level = c("*" = .05),
y_position = unlist(heights))
final_results <- final_results %>%
append(list("Name" = a,
"Kruskall.Wallis" = te[1],
"Plot" = plt_fin,
"Pairwise" = l))
} else{
print(paste("No significant pairwise comparisons for ", a))
}
} else {  # if no difference between treatment groups...
print(a)
print("No significant difference")
}
} else {
print("No comparisons run")
}
}
return(final_results)
}
analyze(df = mice, col = "Allele", x = "group", y = "rel_abundance",
id_col = "id", filter_str = "A1FB", p_value = .05)
library(sugaR)
library(sugaR)
library(sugaR)
library(sugaR)
#'
#' @param df Dataframe
#' @param x It should be a column of categorical data
#' @param y Column for the y axis - numeric
#' @param group Group for color - categorical
#'
#' @return list of plots
#' @export
#'
#' @examples
plot_overall <- function(df, x, y, group){
x <- as.name(x)
y <- as.name(y)
group <- as.name(group)
a <- df %>%
group_by({{x}}, {{group}}) %>%
summarize(avg = mean({{y}}, na.rm = TRUE)) %>%
ggplot(aes(x = {{x}}, y = avg,
fill = as.factor({{group}}),
group = as.factor({{group}}))) +
geom_col(position = "dodge") +
scale_fill_manual(values = paletteer_d("ggsci::category20_d3")) +
labs(title = str_to_title(paste({{x}}, {{y}}, "Across Groups")),
x = str_to_title(paste({{x}})),
y = str_to_title(paste("Average", {{y}}, "(%)")),
fill = str_to_title(paste({{group}}))) +
theme_bw() +
theme(plot.title = element_text(hjust = .5),
axis.text.x = element_text(angle = 45,
vjust = .25))
b <- df %>%
group_by({{x}}, {{group}}) %>%
summarize(avg = mean({{y}}, na.rm = TRUE)) %>%
ggplot(aes(x = as.factor({{group}}), y = avg, fill = {{x}}, group = {{x}})) +
geom_col(position = "dodge") +
scale_fill_manual(values = paletteer_d("ggsci::category20_d3")) +
labs(title = str_to_title(paste0(x, " ", y, " Across ", group, "s")),
x = str_to_title(paste({{group}})),
y = str_to_title(paste("Average", {{y}}, "(%)")),
fill = str_to_title(paste({{x}}))) +
theme_bw() +
theme(plot.title = element_text(hjust = .5),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, vjust = .25))
print(a)
print(b)
# TODO: Need to return the plots in a way that they can be tweaked with additional
# aruments. Right now it's not going to happen though.
}
library(sugaR)
source("~/.active-rstudio-document", echo=TRUE)
# Set a random seed for reproducibility
set.seed(123)
# Define the parameters
num_simulations <- 5000
group_size <- 1000
# Define the control group outcome probabilities
control_probs <- c(0.055, 0.15, 0.25, 0.50)
# Initialize an empty vector to store the results
results <- vector("numeric", length(control_probs))
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- true_OR * control_prob
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
warnings()
rbinom(group_size, 1, .015)
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
print(i)
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- true_OR * control_prob
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
print(control_prob)
print(drug_prob)
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- true_OR * control_prob
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
results
drug_group
OR
simulations %>% head()
library(tidyverse)
simulations %>% head()
control_prob
drug_prob
num_simulations
rbinom(group_size, 1, 1.5)
.15*3
print(control_prob, drug_prob)
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
print(c(control_prob, drug_prob))
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- true_OR * control_prob
print(c(control_prob, drug_prob))
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
# Define the control group outcome probabilities
control_probs <- c(0.15, 0.35, 0.5, 0.75)
drug_probs <- c(.055, .15, .25, .5)
# Initialize an empty vector to store the results
results <- vector("numeric", length(control_probs))
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- drug_probs[i]
print(c(control_prob, drug_prob))
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
# Create a data frame for plotting
plot_data <- data.frame(Control_Risk = control_probs, Delta = results)
# Create a plot
ggplot(plot_data, aes(x = Control_Risk, y = Delta)) +
geom_point() +
geom_line() +
labs(
x = "Risk in Control Group",
y = "Mean Difference (OR - RR)",
title = "Relationship Between OR and RR in Simulated Trials"
)
# Define the control group outcome probabilities
drug_probs <- c(0.15, 0.35, 0.5, 0.75)
control_probs <- c(.055, .15, .25, .5)
# Initialize an empty vector to store the results
results <- vector("numeric", length(control_probs))
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- drug_probs[i]
print(c(control_prob, drug_prob))
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / group_size) / (sum(control_group) / group_size)
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
# Create a data frame for plotting
plot_data <- data.frame(Control_Risk = control_probs, Delta = results)
# Create a plot
ggplot(plot_data, aes(x = Control_Risk, y = Delta)) +
geom_point() +
geom_line() +
labs(
x = "Risk in Control Group",
y = "Mean Difference (OR - RR)",
title = "Relationship Between OR and RR in Simulated Trials"
)
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / sum(control_group)) / ((1000 - sum(drug_group)) / (1000 - sum(control_group)))
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Simulate the trials and calculate OR and RR for each combination
for (i in 1:length(control_probs)) {
true_OR <- 3
control_prob <- control_probs[i]
drug_prob <- drug_probs[i]
print(c(control_prob, drug_prob))
# Simulate 5000 trials
simulations <- replicate(num_simulations, {
control_group <- rbinom(group_size, 1, control_prob)
drug_group <- rbinom(group_size, 1, drug_prob)
# Calculate the odds ratio (OR) and relative risk (RR)
OR <- (sum(drug_group) / sum(control_group)) / ((1000 - sum(drug_group)) / (1000 - sum(control_group)))
RR <- OR / (1 - (control_prob - (OR * control_prob)))
# Store the difference between OR and RR
OR - RR
})
# Calculate the mean difference across simulations
results[i] <- mean(simulations)
}
# Create a data frame for plotting
plot_data <- data.frame(Control_Risk = control_probs, Delta = results)
# Create a plot
ggplot(plot_data, aes(x = Control_Risk, y = Delta)) +
geom_point() +
geom_line() +
labs(
x = "Risk in Control Group",
y = "Mean Difference (OR - RR)",
title = "Relationship Between OR and RR in Simulated Trials"
)
x <- c(-1, -1, 0, 0, 0, 0, 1, 1, 1)
y <- c(2, 3, 6, 7, 8, 9, 10, 12, 15)
glm(y ~ x)
glm(y ~ x) %>% summary()
library(tidyverse)
x <- c(-1, -1, 0, 0, 0, 0, 1, 1, 1)
y <- c(2, 3, 6, 7, 8, 9, 10, 12, 15)
glm(y ~ x) %>% summary()
glm(x ~ y) %>% summary()
glm(x ~ y, family = poisson(link = "log")) %>% summary()
glm(y ~ x, family = poisson(link = "log")) %>% summary()
source("~/.active-rstudio-document", echo=TRUE)
}
## Example: Y ~ Poisson, link function = identity, g(mu) = b0 + b1*x
f.iwls <- function(d,b,niter=1)
{
X <- cbind(1,d[,"x"]) # Design matrix
bb <- b
for(i in 1:niter) {
W <- diag(exp(b[1]+b[2]*d[,"x"])) # W diagonal matrix
z <- as.matrix(b[1] + b[2]*d[,"x"] + (d[,"y"]/(b[1] + b[2]*d[,"x"])) - 1) # z vector
b <- solve(t(X)%*%W%*%X)%*%t(X)%*%W%*%z # MLE
bb <- rbind(bb, t(b))
}
return(list(b=b,Information=t(X)%*%W%*%X, bb=bb))
}
f.iwls(d1, b = c(7, 5), niter = 6)
d1 <- as.data.frame(cbind(y=y,x=x))
f.iwls(d1, b = c(7, 5), niter = 6)
f.iwls(d1, b = c(7.29, 4.83), niter = 6)
f.iwls(d1, b = c(1, 2), niter = 6)
## Example: Y ~ Poisson, link function = identity, g(mu) = b0 + b1*x
f.iwls <- function(d,b,niter=1)
{
X <- cbind(1,d[,"x"]) # Design matrix
bb <- b
for(i in 1:niter) {
W <- diag(exp(b[1]+b[2]*d[,"x"])) # W diagonal matrix
z <- as.matrix(b[1] + b[2]*d[,"x"] + (d[,"y"]/(b[1]+b[2]*d[,"x"])) - 1) # z vector
b <- solve(t(X)%*%W%*%X)%*%t(X)%*%W%*%z # MLE
bb <- rbind(bb, t(b))
}
return(list(b=b,Information=t(X)%*%W%*%X, bb=bb))
}
f.iwls(d1, b = c(1, 2), niter = 6)
# Using glm() function in R
x <- c(-1, -1, 0, 0, 0, 0, 1, 1, 1)
y <- c(2, 3, 6, 7, 8, 9, 10, 12, 15)
d1 <- as.data.frame(cbind(y=y,x=x))
## Example: Y ~ Poisson, link function = identity, g(mu) = b0 + b1*x
f.iwls <- function(d,b,niter=1)
{
X <- cbind(1,d[,"x"]) # Design matrix
bb <- b
for(i in 1:niter) {
W <- diag(exp(b[1]+b[2]*d[,"x"])) # W diagonal matrix
z <- as.matrix(b[1] + b[2]*d[,"x"] + (d[,"y"]/(b[1]+b[2]*d[,"x"])) - 1) # z vector
b <- solve(t(X)%*%W%*%X)%*%t(X)%*%W%*%z # MLE
bb <- rbind(bb, t(b))
}
return(list(b=b,Information=t(X)%*%W%*%X, bb=bb))
}
f.iwls(d1, b = c(1, 2), niter = 6)
## Example: Y ~ Poisson, link function = identity, g(mu) = b0 + b1*x
f.iwls <- function(d,b,niter=1)
{
X <- cbind(1,d[,"x"]) # Design matrix
bb <- b
for(i in 1:niter) {
W <- diag(b[1]+b[2]*d[,"x"]) # W diagonal matrix
z <- as.matrix(b[1] + b[2]*d[,"x"] + (d[,"y"]/(b[1]+b[2]*d[,"x"])) - 1) # z vector
b <- solve(t(X)%*%W%*%X)%*%t(X)%*%W%*%z # MLE
bb <- rbind(bb, t(b))
}
return(list(b=b,Information=t(X)%*%W%*%X, bb=bb))
}
f.iwls(d1, b = c(1, 2), niter = 6)
## Example: Y ~ Poisson, link function = identity, g(mu) = b0 + b1*x
f.iwls <- function(d,b,niter=1)
{
X <- cbind(1,d[,"x"]) # Design matrix
bb <- b
for(i in 1:niter) {
W <- diag(exp(b[1]+b[2]*d[,"x"])) # W diagonal matrix
z <- as.matrix(b[1] + b[2]*d[,"x"] + (d[,"y"]/exp(b[1]+b[2]*d[,"x"])) - 1) # z vector
b <- solve(t(X)%*%W%*%X)%*%t(X)%*%W%*%z # MLE
bb <- rbind(bb, t(b))
}
return(list(b=b,Information=t(X)%*%W%*%X, bb=bb))
}
f.iwls(d1, b = c(1, 2), niter = 6)
parms <- f.iwls(d1, b = c(1, 2), niter = 6)
solve(parms$Information)
glm(y ~ x, family = poisson(link = "log")) %>% summary()
